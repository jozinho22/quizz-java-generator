[
	{
		"texte": "Quel sont les trois grands principes de la POO ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "L'encapsulation, l'héritage et le polymorphisme ",
				"isTrue": true
			},
			{
				"texte": "L'encapsulation, l'héritage multiple et le polymorphisme ",
				"isTrue": false
			},
			{
				"texte": "Le multi-threading, l'accès aux données et le polymorphisme ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel interface implémente la classe <code>ArrayList</code> ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "<code>List</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>Queue</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>Serializable</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Que signifie <code>-u</code> dans la commande <code>git</code> <code>push</code> <code>-u</code> <code>origin</code> <code>master</code> ?",
		"topic": "Git",
		"reponses": [
			{
				"texte": "--unique ",
				"isTrue": false
			},
			{
				"texte": "<code>--set-upstream</code> ",
				"isTrue": true
			},
			{
				"texte": "--utf-8 ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel est le principal avantage de l'interface <code>Set</code> par rapport à l'interface <code>List</code> ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Elle permet daccepter des doublons ",
				"isTrue": true
			},
			{
				"texte": "Elle permet une flexibilité des entrées ",
				"isTrue": false
			},
			{
				"texte": "Elle permet de ne pas accepter de doublons ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Que se passe-t-il si vous créez un nouveau dépôt Git en remote avec un commit, et que vous créez son équivalent local et que vous effectuez la commenade <code>git</code> <code>push</code> après avoir commité ?",
		"topic": "Git",
		"reponses": [
			{
				"texte": "Git va vous informer que les deux commits nont pas de commits en commun ",
				"isTrue": true
			},
			{
				"texte": "Le <code>push</code> va bien se passer ",
				"isTrue": false
			},
			{
				"texte": "Git va vous informer que vous nêtes pas à jour par rapport au dépôt distant ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel sont les avantages à utiliser la classe <code>Vector</code> plutôt que la classe <code>List</code> ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Elle est plus rapide ",
				"isTrue": false
			},
			{
				"texte": "Elle est synchronisée et permet ditérer sur un <code>Enum</code> ",
				"isTrue": true
			},
			{
				"texte": "Elle a plus de capacité ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelles interfaces implémente la classe <code>LinkedList</code> ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "<code>List</code> et <code>Set</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>List</code> et <code>Queue</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>Set</code> et <code>Queue</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelle est une des utilités de la classe Integer, par rapport à un <code>int</code> primitif ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Cest Thread-safe ",
				"isTrue": false
			},
			{
				"texte": "Cela augmente la performance de traitement ",
				"isTrue": false
			},
			{
				"texte": "Cela permet de créer des listes de nombres entiers ",
				"isTrue": true
			}
		]
	},
	{
		"texte": "Quel est la différence entre les commandes <code>git</code> <code>rebase</code> et <code>git</code> <code>merge</code> ?",
		"topic": "Git",
		"reponses": [
			{
				"texte": "<code>git</code> <code>rebase</code> place le commit souhaité au niveau du commit actuel, tandis que <code>git</code> <code>merge</code> va créer un nouveau commit pour la fusion des deux branches ",
				"isTrue": false
			},
			{
				"texte": "Ce sont deux façons de faire différentes pour le même résultat ",
				"isTrue": false
			},
			{
				"texte": "<code>git</code> <code>rebase</code> place le commit actuel au niveau du commit souhaité, tandis que <code>git</code> <code>merge</code> va créer un nouveau commit pour la fusion des deux branches ",
				"isTrue": true
			}
		]
	},
	{
		"texte": "Comment démarre-t-on un dépôt Git en local ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "<code>git</code> <code>init</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>git</code> <code>status</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>git</code> <code>clone</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelle syntaxe utilisée pour afficher des données Java dans une page HTML avec la JSTL ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "<code>${object.attribute}</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>#{object.attribute}</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>#{object.getAttribute()}</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelle est la classe mère de toutes les classes ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "<code>Class</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>Object</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>Pojo</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelle est la principe d'une <code>Map</code> ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Elle référence un objet grâce à son <code>hashcode()</code> ",
				"isTrue": false
			},
			{
				"texte": "Elle permet de stocker des objets à un autre emplacement mémoire ",
				"isTrue": false
			},
			{
				"texte": "Elle référence un object grâce à une clé ",
				"isTrue": true
			}
		]
	},
	{
		"texte": "A qui correspond lannotation <code>@Id @GeneratedValue(strategy = GenerationType.IDENTITY)</code> ?",
		"topic": "JPA",
		"reponses": [
			{
				"texte": "Elle référence un objet grâce à son <code>hashcode()</code> ",
				"isTrue": false
			},
			{
				"texte": "L'Id de l'objet sera directement mappé avec la valeur de l'Id quon lui affectera manuellement ",
				"isTrue": false
			},
			{
				"texte": "Une séquence seré générée spécifiquement pour cet objet ",
				"isTrue": true
			}
		]
	},
	{
		"texte": "Quel est léquivalent de lannotation <code>@javax.inject.Named</code> ?",
		"topic": "JPA",
		"reponses": [
			{
				"texte": "<code>@org.springframework.stereotype.Component</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>@org.springframework.beans.factory.annotation.Autowired</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>@javax.inject.Inject</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel est léquivalent de l''annotation <code>@javax.inject.Inject</code> ?",
		"topic": "JPA",
		"reponses": [
			{
				"texte": "<code>@org.springframework.stereotype.Component</code> ",
				"isTrue": false
			},
			{
				"texte": "<code>@org.springframework.beans.factory.annotation.Autowired</code> ",
				"isTrue": true
			},
			{
				"texte": "<code>@javax.inject.Named</code> ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel est la définition d'une classe abstraite ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Une classe qui contient au moins une méthode abstraite ",
				"isTrue": true
			},
			{
				"texte": "Une classe qui hérite d'une classe fille ",
				"isTrue": false
			},
			{
				"texte": "Une classe qui ne contient pas d'attribut ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quelle est la définition d'une interface ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Une classe qui masque d'autres classes filles ",
				"isTrue": false
			},
			{
				"texte": "Une classe qui ne contient que des méthodes abstraites ",
				"isTrue": true
			},
			{
				"texte": "Aucune des deux ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Que signifie les mots-clefs '<code>final</code> static' appliqués à un attribut d'une classe ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Cela signifie que l'attribut ne peut pas être instancié ",
				"isTrue": false
			},
			{
				"texte": "Cela signifie que l'attribut pourra être appelé uniquement après avoir instancier la classe ",
				"isTrue": false
			},
			{
				"texte": "Cela signifie que l'attribut sera une constante ",
				"isTrue": true
			}
		]
	},
	{
		"texte": "Que signifie le mot-clef 'static' appliqué à une méthode d'une classe ?",
		"topic": "Java",
		"reponses": [
			{
				"texte": "Cela signifie que la méthode pourra être appelée sans instancier la classe ",
				"isTrue": true
			},
			{
				"texte": "Cela signifie que la méthode ne pourra pas être modifiée ",
				"isTrue": false
			},
			{
				"texte": "Aucune des deux ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Que signifie le mot-clef 'private' pour un attribut de classe ?",
		"topic": "",
		"reponses": [
			{
				"texte": "Cela signifie que l'attribut ne pourra être visible qu'avec un mot de passe ",
				"isTrue": false
			},
			{
				"texte": "Cela signifie que l'attribut ne sera visible que depuis la classe ",
				"isTrue": true
			},
			{
				"texte": "Cela signifie que l'attribut ne sera visible que depuis la classe et les classes du même package ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Que signifie le mot-clef 'protected' pour un attribut de classe ?",
		"topic": "",
		"reponses": [
			{
				"texte": "Cela signifie que l'attribut ne pourra être visible qu'avec un mot de passe ",
				"isTrue": false
			},
			{
				"texte": "Cela signifie que l'attribut ne sera visible que depuis la classe qui hérite de la classe ",
				"isTrue": true
			},
			{
				"texte": "Cela signifie que l'attribut ne sera visible que depuis la classe et les classes du même package ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "Quel est l'utilité du design pattern",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	},
	{
		"texte": "",
		"topic": "",
		"reponses": [
			{
				"texte": " ",
				"isTrue": true
			},
			{
				"texte": " ",
				"isTrue": false
			},
			{
				"texte": " ",
				"isTrue": false
			}
		]
	}
]
